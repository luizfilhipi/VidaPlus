// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_vidaplus/test/presentation/controllers/habit_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i10;

import 'package:flutter_vidaplus/domain/entities/habit_entity.dart' as _i2;
import 'package:flutter_vidaplus/domain/entities/user_entity.dart' as _i8;
import 'package:flutter_vidaplus/domain/repositories/auth_repository.dart'
    as _i3;
import 'package:flutter_vidaplus/domain/usecases/habit_usecases.dart' as _i5;
import 'package:flutter_vidaplus/presentation/controllers/auth_controller.dart'
    as _i7;
import 'package:get/get.dart' as _i4;
import 'package:get/get_state_manager/src/simple/list_notifier.dart' as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHabitEntity_0 extends _i1.SmartFake implements _i2.HabitEntity {
  _FakeHabitEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthRepository_1 extends _i1.SmartFake
    implements _i3.AuthRepository {
  _FakeAuthRepository_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxn_2<T> extends _i1.SmartFake implements _i4.Rxn<T> {
  _FakeRxn_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxBool_3 extends _i1.SmartFake implements _i4.RxBool {
  _FakeRxBool_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeRxString_4 extends _i1.SmartFake implements _i4.RxString {
  _FakeRxString_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternalFinalCallback_5<T> extends _i1.SmartFake
    implements _i4.InternalFinalCallback<T> {
  _FakeInternalFinalCallback_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddHabitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddHabitUseCase extends _i1.Mock implements _i5.AddHabitUseCase {
  MockAddHabitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.HabitEntity> call(_i2.HabitEntity? habit) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habit]),
            returnValue: _i6.Future<_i2.HabitEntity>.value(
              _FakeHabitEntity_0(this, Invocation.method(#call, [habit])),
            ),
          )
          as _i6.Future<_i2.HabitEntity>);
}

/// A class which mocks [GetHabitsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHabitsUseCase extends _i1.Mock implements _i5.GetHabitsUseCase {
  MockGetHabitsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i2.HabitEntity>> call(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [userId]),
            returnValue: _i6.Stream<List<_i2.HabitEntity>>.empty(),
          )
          as _i6.Stream<List<_i2.HabitEntity>>);
}

/// A class which mocks [UpdateHabitUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateHabitUseCase extends _i1.Mock
    implements _i5.UpdateHabitUseCase {
  MockUpdateHabitUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<void> call(_i2.HabitEntity? habit) =>
      (super.noSuchMethod(
            Invocation.method(#call, [habit]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AuthController].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthController extends _i1.Mock implements _i7.AuthController {
  MockAuthController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AuthRepository get authRepository =>
      (super.noSuchMethod(
            Invocation.getter(#authRepository),
            returnValue: _FakeAuthRepository_1(
              this,
              Invocation.getter(#authRepository),
            ),
          )
          as _i3.AuthRepository);

  @override
  _i4.Rxn<_i8.UserEntity> get user =>
      (super.noSuchMethod(
            Invocation.getter(#user),
            returnValue: _FakeRxn_2<_i8.UserEntity>(
              this,
              Invocation.getter(#user),
            ),
          )
          as _i4.Rxn<_i8.UserEntity>);

  @override
  _i4.RxBool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: _FakeRxBool_3(this, Invocation.getter(#isLoading)),
          )
          as _i4.RxBool);

  @override
  _i4.RxString get error =>
      (super.noSuchMethod(
            Invocation.getter(#error),
            returnValue: _FakeRxString_4(this, Invocation.getter(#error)),
          )
          as _i4.RxString);

  @override
  set user(_i4.Rxn<_i8.UserEntity>? _user) => super.noSuchMethod(
    Invocation.setter(#user, _user),
    returnValueForMissingStub: null,
  );

  @override
  set isLoading(_i4.RxBool? _isLoading) => super.noSuchMethod(
    Invocation.setter(#isLoading, _isLoading),
    returnValueForMissingStub: null,
  );

  @override
  set error(_i4.RxString? _error) => super.noSuchMethod(
    Invocation.setter(#error, _error),
    returnValueForMissingStub: null,
  );

  @override
  _i4.InternalFinalCallback<void> get onStart =>
      (super.noSuchMethod(
            Invocation.getter(#onStart),
            returnValue: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onStart),
            ),
          )
          as _i4.InternalFinalCallback<void>);

  @override
  _i4.InternalFinalCallback<void> get onDelete =>
      (super.noSuchMethod(
            Invocation.getter(#onDelete),
            returnValue: _FakeInternalFinalCallback_5<void>(
              this,
              Invocation.getter(#onDelete),
            ),
          )
          as _i4.InternalFinalCallback<void>);

  @override
  bool get initialized =>
      (super.noSuchMethod(Invocation.getter(#initialized), returnValue: false)
          as bool);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  int get listeners =>
      (super.noSuchMethod(Invocation.getter(#listeners), returnValue: 0)
          as int);

  @override
  _i6.Future<bool> login(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [email, password]),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<void> register(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void onInit() => super.noSuchMethod(
    Invocation.method(#onInit, []),
    returnValueForMissingStub: null,
  );

  @override
  void update([List<Object>? ids, bool? condition = true]) =>
      super.noSuchMethod(
        Invocation.method(#update, [ids, condition]),
        returnValueForMissingStub: null,
      );

  @override
  void onReady() => super.noSuchMethod(
    Invocation.method(#onReady, []),
    returnValueForMissingStub: null,
  );

  @override
  void onClose() => super.noSuchMethod(
    Invocation.method(#onClose, []),
    returnValueForMissingStub: null,
  );

  @override
  void $configureLifeCycle() => super.noSuchMethod(
    Invocation.method(#$configureLifeCycle, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Disposer addListener(_i9.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListener, [listener]),
            returnValue: () {},
          )
          as _i9.Disposer);

  @override
  void removeListener(_i10.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void refresh() => super.noSuchMethod(
    Invocation.method(#refresh, []),
    returnValueForMissingStub: null,
  );

  @override
  void refreshGroup(Object? id) => super.noSuchMethod(
    Invocation.method(#refreshGroup, [id]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyChildrens() => super.noSuchMethod(
    Invocation.method(#notifyChildrens, []),
    returnValueForMissingStub: null,
  );

  @override
  void removeListenerId(Object? id, _i10.VoidCallback? listener) =>
      super.noSuchMethod(
        Invocation.method(#removeListenerId, [id, listener]),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  _i9.Disposer addListenerId(Object? key, _i9.GetStateUpdate? listener) =>
      (super.noSuchMethod(
            Invocation.method(#addListenerId, [key, listener]),
            returnValue: () {},
          )
          as _i9.Disposer);

  @override
  void disposeId(Object? id) => super.noSuchMethod(
    Invocation.method(#disposeId, [id]),
    returnValueForMissingStub: null,
  );
}
